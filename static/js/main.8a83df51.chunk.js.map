{"version":3,"sources":["index.js"],"names":["Square","className","onClick","this","props","value","React","Component","Board","i","squares","renderSquare","Game","state","history","Array","fill","stepNumber","xIsNext","slice","length","calculateWinner","setState","concat","step","status","current","winner","moves","map","move","desc","key","jumpTo","handleClick","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"8MASMA,G,uLAEF,OAEE,4BAAQC,UAAU,SAASC,QAASC,KAAKC,MAAMF,SAC5CC,KAAKC,MAAMC,W,GALCC,IAAMC,YAYrBC,E,qLACSC,GAAI,IAAD,OACd,OACE,kBAACT,EAAD,CACEK,MAAOF,KAAKC,MAAMM,QAAQD,GAC1BP,QAAS,kBAAM,EAAKE,MAAMF,QAAQO,Q,+BAMtC,OACE,6BACE,yBAAKR,UAAU,aACZE,KAAKQ,aAAa,GAClBR,KAAKQ,aAAa,GAClBR,KAAKQ,aAAa,IAErB,yBAAKV,UAAU,aACZE,KAAKQ,aAAa,GAClBR,KAAKQ,aAAa,GAClBR,KAAKQ,aAAa,IAErB,yBAAKV,UAAU,aACZE,KAAKQ,aAAa,GAClBR,KAAKQ,aAAa,GAClBR,KAAKQ,aAAa,S,GA1BTL,IAAMC,WAiCpBK,E,YAIJ,WAAYR,GAAQ,IAAD,8BACjB,4CAAMA,KACDS,MAAQ,CACXC,QAAS,CAAC,CACRJ,QAASK,MAAM,GAAGC,KAAK,QAEzBC,WAAY,EACZC,SAAS,GAPM,E,yEAWPT,GAEV,IAAMK,EAAUX,KAAKU,MAAMC,QAAQK,MAAM,EAAGhB,KAAKU,MAAMI,WAAa,GAG9DP,EADUI,EAAQA,EAAQM,OAAS,GACjBV,QAAQS,QAE5BE,EAAgBX,IAAYA,EAAQD,KAIxCC,EAAQD,GAAKN,KAAKU,MAAMK,QAAU,IAAM,IAExCf,KAAKmB,SAAS,CACZR,QAASA,EAAQS,OAAO,CAAC,CACvBb,QAASA,KAEXO,WAAYH,EAAQM,OACpBF,SAAUf,KAAKU,MAAMK,a,6BAKlBM,GACLrB,KAAKmB,SAAS,CACZL,WAAYO,EACZN,QAAUM,EAAO,IAAO,M,+BAIlB,IAkBJC,EAlBG,OACDX,EAAUX,KAAKU,MAAMC,QACrBY,EAAUZ,EAAQX,KAAKU,MAAMI,YAC7BU,EAASN,EAAgBK,EAAQhB,SAIjCkB,EAAQd,EAAQe,KAAI,SAACL,EAAMM,GAC/B,IAAMC,EAAOD,EACX,eAAiBA,EACjB,mBACF,OACE,wBAAIE,IAAKF,GACP,4BAAQ5B,QAAS,kBAAM,EAAK+B,OAAOH,KAAQC,OAajD,OANEN,EADEE,EACO,WAAaA,EAEb,iBAAmBxB,KAAKU,MAAMK,QAAU,IAAM,KAKvD,yBAAKjB,UAAU,QACb,yBAAKA,UAAU,cACb,kBAACO,EAAD,CACEE,QAASgB,EAAQhB,QACjBR,QAAS,SAACO,GAAD,OAAO,EAAKyB,YAAYzB,OAGrC,yBAAKR,UAAU,aACb,6BAAMwB,GACN,4BAAKG,S,GAjFItB,IAAMC,WA+FzB,SAASc,EAAgBX,GAYvB,IAVA,IAAMyB,EAAQ,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEA1B,EAAI,EAAGA,EAAI0B,EAAMf,OAAQX,IAAK,CAAC,IAAD,cACnB0B,EAAM1B,GADa,GAC9B2B,EAD8B,KAC3BC,EAD2B,KACxBC,EADwB,KAGrC,GAAI5B,EAAQ0B,IAAM1B,EAAQ0B,KAAO1B,EAAQ2B,IAAM3B,EAAQ0B,KAAO1B,EAAQ4B,GACpE,OAAO5B,EAAQ0B,GAGnB,OAAO,KAzBTG,IAASC,OACP,kBAAC5B,EAAD,MACA6B,SAASC,eAAe,U","file":"static/js/main.8a83df51.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\n// Gameコンポーネント > Boardコンポーネント > Squareコンポーネントで構成されている。\n// /public/index.htmlからこのファイルを読み込んでいる。\n// /public/index.html内のid=\"root\"に対して、Gameコンポーネントを描画している。\n\n// 1つの正方形を定義している。\nclass Square extends React.Component {\n  render() {\n    return (\n      //クリック時にBoardのprops.onClickを呼び出す。\n      <button className=\"square\" onClick={this.props.onClick}>\n        {this.props.value}\n      </button>\n    );\n  }\n}\n\n// Squareを9つ並べたボードを定義している\nclass Board extends React.Component {\n  renderSquare(i) {\n    return (\n      <Square\n        value={this.props.squares[i]} \n        onClick={() => this.props.onClick(i)} // クリックされた時に、Gameのhandleclickを呼び出す。(何番目のタイルかを渡す)\n      />\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"board-row\">\n          {this.renderSquare(0)}\n          {this.renderSquare(1)}\n          {this.renderSquare(2)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(3)}\n          {this.renderSquare(4)}\n          {this.renderSquare(5)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(6)}\n          {this.renderSquare(7)}\n          {this.renderSquare(8)}\n        </div>\n      </div>\n    );\n  }\n}\n\nclass Game extends React.Component {\n  // historyにsquaresを配列で入れて履歴を保持する。\n  // stepNumberで現在historyのどこにいるかを保持する。\n  // xIsNextで次のplayerの情報を保持する。\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [{\n        squares: Array(9).fill(null),\n      }],\n      stepNumber: 0,\n      xIsNext: true,\n    };\n  }\n\n  handleClick(i) {\n    // historyに新しい履歴を追加する。現在のstepNumber + 1で追加する。\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    // 不変データとする為に、squaresのコピーを作成している\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n    // 勝者が決まってる時と既に入力されてる時はクリックしても何もしない。\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n    // playerがxの時はそのsquareをXに, 違かったらOにする。\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\n    // squares, stepNumber, xIsNextを更新する。\n    this.setState({\n      history: history.concat([{\n        squares: squares\n      }]),\n      stepNumber: history.length,\n      xIsNext: !this.state.xIsNext,\n    });\n  }\n\n  // stepNumberとxIsNextを更新する。(stepNumberが更新されるとタイルの情報がその時に書き換わる。)\n  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      xIsNext: (step % 2) === 0,\n    });\n  }\n  \n  render() {\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n    const winner = calculateWinner(current.squares);\n\n    // historyの数だけ<li>を用意している。最初はGo to game startとなるようになってる。\n    // stepをmoveに格納して展開している。\n    const moves = history.map((step, move) => {\n      const desc = move ?\n        'Go to move #' + move :\n        'Go to game start';\n      return (\n        <li key={move}>\n          <button onClick={() => this.jumpTo(move)}>{desc}</button>\n        </li>\n      );\n    });\n\n    let status;\n    if (winner) {\n      status = 'Winner: ' + winner;\n    } else {\n      status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n    }\n\n    // 一番親要素のrender\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board \n            squares={current.squares}\n            onClick={(i) => this.handleClick(i)}\n          />\n        </div>\n        <div className=\"game-info\">\n          <div>{status}</div>\n          <ol>{moves}</ol>\n        </div>\n      </div>\n    );\n  }\n}\n\n// /public/index.html内の#rootに対してGameを返している。\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n);\n\n// 勝ちを判断する関数\nfunction calculateWinner(squares) {\n  // 全ての勝ちパターンを格納\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    // 勝ちパターンと実際の配列を比較して揃ってる場合は勝者(X or O)を返す\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}"],"sourceRoot":""}